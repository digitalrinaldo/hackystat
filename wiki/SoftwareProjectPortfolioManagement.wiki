#summary An overview of software project portfolio management with Hackystat

= 1.0 Introduction =

In large companies, it is possible to have dozens or even hundreds of
software projects underway at any given point in time.  This kind of scale
produces new challenges, as well as new opportunities for these companies.
Both challenges and opportunities result from the need of the company to
successfully understand and exploit their ownership of a "portfolio" of
software projects.

While the principles and practices of software project portfolio management
are not well understood, one can gain some initial insight into its
potential through analogy with financial portfolio management, for which
there are much better established guiding principles.  Just like a
financial portfolio, a software project portfolio should be managed in such
a way as to balance risk against reward, support performance assessment in
multiple ways, and gain insight into each "investment".

In the financial world, investors have a variety of ways to gain insight
into their portfolio.  First, they have the annual reports of their
companies, in which representatives of a company provide details about the
current status and future directions of their organization.  Second,
investors can use objective, standardized metrics such as share price
appreciation (or depreciation) over time, price/earnings ratios, and so
forth.  The standardized metrics have the advantages of being objective and
supporting baseline comparisons.  However, the annual reports and other
sources of subjective information about the organization provide an
important balance to the raw metrics which can put them into perspective,
and even lead the investor to think in terms of entirely different metrics
for evaluating that organization.

If you used only annual reports to manage your financial portfolio, then you might
never sell a stock that you currently own, and you might never by any stocks
other than those you currently own.  For many reasons, most of them
quite reasonable, annual reports tend to be optimistic.  So, this is a
suboptimal strategy.  On the other hand, if you used only standard metrics
like short-term share price change to manage your portfolio, then you
might end up with the worst-case scenario for financial portfolio
management: buying at the top and selling at the bottom.

Thus, the best approach for managing a financial portfolio is to gather
and integrate together a variety of types of information, both subjective and objective.

In the case of a software portfolio, the equivalent of the "annual report"
is typically already available: it is the monthly or
quarterly progress reports provided by the individual projects regarding
their current status and future directions. The goal of the software
project portfolio management is to integrate this subjective information with
an additional, objective, complementary source of information to senior
management.  Such information is analogous to standardized financial
metrics like price/earnings ratios. 

Just as a financial analyst combines together subjective and objective
information to gain insight into the portfolio, managers in a company with
a large number of projects can combine together subjective and objective
information to gain insight into how individual projects, as well as the
portfolio as a whole, is performing.  

Software project portfolio management has an important benefit for
developers as well.  Developers wish to work more efficiently and
effectively.  One way they do this is by learning from their current and
prior professional experiences about what works and what doesn't work.  A
second way is through reading technical publications which contain research
and case studies on new tools, techniques, and practices.  However, these
articles often do not contain sufficient detail for developers to
understand how to apply the practices to their own circumstances, or
whether the benefits claimed for the organization in the case study would
occur in their own organization, which might differ in significant ways.

Software project portfolio management provides a new way for developers to
learn how to work more efficiently and effectively, because it provides
them with new visibility into the projects within their own organization.
First, it enables developers to become more easily aware of projects that
are similar to their own, but that might differ along one or more objective
or subjective dimensions.  Such projects provide a valuable opportunity to
developers in both projects to gain insight into what is causing the
differences between projects in the same organization that are otherwise
similar.   

This is the vision, but practical questions remain.  What kinds of
objective information can be gathered across dozens or hundreds of projects
without incurring excessive cost?  In what ways can this information be
made useful both to management as well as to the developers themselves?
The next three sections present three concrete examples: benchmarks, a
continuous integration ICU, and a developer expertise browser.

= 2.0 Software Project Portfolio Management Applications =

== 2.1 Internal Benchmarking ==

This section will overview the use of internal benchmarks.  The opportunity for a large company is that they do not have to rely on external benchmarks, they can use their own portfolio.  This can increase buy-in from developers since (a) all projects are being compared within the same company, reducing the charge that the comparison is unfair, and (b) if a project A compares unfavorably to project B, it is possible to investigate the differences in detail and determine why the projects differ along the chosen dimension, and what action to take, if any.  This is not possible when comparing an internal project to a published industry benchmark.

Benefit to management:  better visibility into projects and their comparative performance. 

Benefit to developers:  out of the dozens or hundreds of projects, which ones are comparable? Which ones are doing better?  This represents opportunities for learning, improvement, and reuse. 

== 2.2 Continuous Integration ICU ==

In a nutshell, provides an "early warning system" to both developers and managers regarding projects that may be in trouble. 
More details in [ContinuousIntegrationICU The Continuous Integration ICU].


== 2.3 Developer Expertise Browser ==

In a large company with dozens or hundreds of developers, there are pockets of expertise that are not exploited in a "just in time" manner. 

By combining commit information with structural information, a profile of each developer in terms of the libraries they work on can be automatically built.  This enables developers to easily find others in the organization who might be able to help them solve a problem or acquire a new technology.






