#summary System Build information for Hackystat developers

= 1.0 Introduction =

The purpose of this document is to help Hackystat developers understand how to configure their environment to perform development on new or existing sensors and services.  

= 2.0 General Issues =

In Version 7, the monolithic nature of Hackystat meant that it could be compiled and tested as a single entity, which made it relatively easy to test for integration-level issues. 

In Version 8, the decomposition of Hackystat into a set of independent sensors and services has a wide variety of benefits, but it also brings one significant downside: integration testing is somewhat more difficult, and projects can easily get "out of sync" with each other. 

For example, many services use the !SensorBaseClient class to communicate with the !SensorBase.  This class is defined in the hackystat-sensorbase-uh project.  When changes are made to that API, all projects that depend upon that system need to build and test themselves against that revised API.  

There are a variety of strategies a developer can use to support development and manage these integration-level dependencies, as discussed next.

= 3.0 Local build environment options =

== 3.1 Independent local project workspaces ==

The initial approach used by Hackystat developers was to SVN checkout local copies of most or all of the Hackystat projects.  Typically, one would create a top-level directory, such as svn-google, and independently check out each project as a subfolder, giving rise to the following directory structure:

{{{
svn-google/
          hackystat-utilities/
          hackystat-sensorbase-uh/
           :
}}}

Hackystat projects establish their dependencies by the use of environment variables (in the case of Ant) and classpath variables (in the case of Eclipse).  For example, the hackystat-sensorbase-uh system requires (among other things) the jar files produced by the hackystat-utilities project.  Thus, in order to satisfy the dependency of the hackystat-sensorbase-uh system on hackystat-utilities, one would have to:

  * Define an environment variable called HACKYSTAT_UTILITIES_HOME and point it to the svn-google/hackystat-utilities directory. 

  * Invoke 'ant -f jar.build.xml' in the hackystat-utilities project, which would build the various utility jar files (hackystatlogger.lib.jar, etc.) in the hackystat-utilities directory. 

It turns out that some dependency chains can get fairly long:

{{{
hackystat-sensor-xmldata -> hackystat-sensor-shell -> hackystat-sensorbase-uh -> hackystat-utilities 

hackystat-analysis-telemetry -> hackystat-analysis-dailyprojectdata -> hackystat-sensorbase-uh -> hackystat-utilities
}}}

What this implies is that if you are working on hackystat-analysis-telemetry and someone makes an incompatible change to the hackystat-utilities system, you may need to:
  * SVN update hackystat-utilities, rebuild, and rejar those binaries. 
  * SVN update hackystat-sensorbase, rebuild, and rejar those binaries. 
  * SVN update hackystat-dailyprojectdata, rebuild, and rejar those binaries. 

This can be time-consuming and exasperating, particularly because it is not always clear what dependencies exist and which of them are out of date. 

In summary, the advantage of "independent local workspaces" is:

 * It is possible to make and test changes across multiple Hackystat projects simultaneously. 

The disadvantages of "independent local workspaces" are:

 * It is hard to know when to update one or more local projects and rebuild.  

 * Changes to a low level project, such as hackystat-utilities, can have a dramatic ripple effects, requiring SVN updates and rebuilds of many other projects in order to bring the system back into a consistent state. 

== 3.2 One local project plus a System Distribution ==

An alternative approach is possible when a developer is interested in only one Hackystat project (or a small number of projects). In this case, the developer can download a binary System Distribution, with prebuilt binaries for all sensors and services, along with SVN checkout of the sensor/service of interest. For example, let's say a developer wants to work on hackystat-sensor-xmldata.  He or she might set up their local file space as follows:

{{{
public-hackystat/
                hackystat-8.0.1101-services-bin/
                                                hackystat-utilities/
                                                                    stacktrace.lib.jar
                                                                   :
                                                hackystat-sensorbase-uh/
                                                                        sensorbase.jar
                                                                       :
                                             :
svn-google/
          hackystat-sensor-xmldata/
                                    :
}}}

In this approach, the developer would define various environment variables to point to the  system distribution bin/ directories.  For example, the environment variable HACKYSTAT_UTILITIES_HOME would point to 
{{{
public_hackystat/hackystat-8.0.1101-services-bin/hackystat-utilities/ 
}}}
The advantages of "one local project plus a System Distribution" are:

  * All dependencies in a System Distribution have been resolved, so the binaries  are consistent with each other. 

  * It is generally faster and easier to download and setup a System Distribution than to download and set up all of the individual sensors and services. 

  * It is generally faster and easier to update to a new version of a System Distribution than it is to update all of the individual sensors and services and build them against each other. 

The disadvantages of "one local project plus a System Distribution" are:

  * If the latest System Distribution is out of date, then you have to wait for someone to upload a more recent version. 

  * The advantage of this approach diminishes the more projects you are working on. 

== 3.3 Build your own local system distribution ==

A final alternative is create your own local version of a system distribution.  To do this, you must first SVN checkout the hackystat/trunk directory, which will give you a build.xml, a macros.build.xml, and a dist.build.xml file. For example:

{{{
svn-google/
          hackystat/
                   build.xml
                   macros.xml
                   dist.xml
}}}

Take a look in the build.xml file. What you'll find is a target for each Hackystat project that will (a) SVN checkout the sources into the build/ directory, run the verify target, and create the binaries in a system/ subdirectory.  For example, the build.utilities target does this for hackystat-utilities, the build.sensorbase target does this for hackystat-sensorbase, and so forth.   There is a build.all target that will run all of these targets in an order appropriate to their dependencies, and thus build the most recent sources for the entire system against themselves. 
             
When you run the system build.{project} targets for the first time, you will experience a minor hiccup: Ant will print out a message regarding a missing credential and ask how you would like to handle it. You can type 'p' to "permanently accept the certificate" and Ant will proceed.  

In the case of the Macintosh, you can run 'ant build.all', type 'p' each time the credential message appears, and get the entire system checked out.  In the case of Windows, I have discovered that you need to do each service individually the first time. So, you will invoke:
  * ant build.utilities
  * ant build.sensorbase
  * ant build.sensorshell
and so forth.  Look at the build.all task and the list of dependent targets indicates the targets to manually invoke and the order to invoke them in. 

Note that after you have done this checkout the first time, you will not have to type 'p' any longer.  It also becomes possible to run 'ant build.all' successfully on Windows after that first checkout. 

At any rate, once you have finished, you'll have a directory structure like this:

{{{
svn-google/
          hackystat/
                   build/
                        hackystat-utilities/
                        hackystat-sensorbase-uh/
                           :
                        system/
                              services/
                                      hackystat-utilities/
                                                            stacktrace.lib.jar
                                                              :
                                      hackystat-sensorbase-uh/
                                                                sensorbase.jar
                                         :
                              sensors/
                                     hackystat-sensor-shell/
                                         :
}}}

You can now point your Hackystat environment variables at these binaries if you so choose.  For example, you could set HACKYSTAT_SENSORBASE_HOME to 

{{{
svn-google/hackystat/build/system/services/hackystat-sensorbase-uh/
}}}

The advantages to a "local system distribution" are:

  * You do not have to wait for a System Distribution binary to be uploaded.  You can create your own when you suspect that low-level projects have been changed.

  * Once you have gotten your first 'ant build.all' to succeed, it is extremely simple to generate a complete and consistent build of the latest sources of the entire set of Hackystat services.   Currently, this system build takes around 7 minutes. 

The disadvantages of a "local system distribution" are:

  * It is a bit time-consuming to set up the first time, particularly on Windows.

  * If you do point your environment variables at these binaries, then you run the risk of running a build and having it fail, at which point your environment variables don't work. 

= 4.0 Summary and conclusions =

There is no one-size-fits-all approach to building Hackystat. Which of these approaches (or combinations of approaches) that you use really depends upon your situation.  

For new developers, I recommend the approach outlined in Section 3.2, in which you download a system distribution and use that as your repository of binaries. This minimizes the hassles, and provided you have a recent binary, eliminates the need for 'cascading rebuilds' of the system when something at a low level changes. 

For experienced developers, I recommend following Section 3.3 and getting to the point where you can easily create local system builds.  Then when you find yourself with errors that look like integration issues, you can easily check what's going on. 

Good luck, and feel free to send email to the [http://groups.google.com/group/hackystat-dev hackystat-dev list] if you encounter issues. 

  
                                      

 