#summary System Build information for Hackystat developers

= 1.0 Introduction =

The Hackystat Framework is built from over a dozen independent Google Projects, as detailed in the [ProjectDirectory Project Directory].  Some of these projects are inter-dependent. For example, the Eclipse Sensor project depends upon the Sensor Shell project; the Sensor Shell project depends upon the !SensorBase project, and the !SensorBase Project depends upon the Utilities project. 

In addition, most Hackystat projects have a number of external dependencies; in other words, to build the system, you will have to download and install a third party library.  For example, the [http://code.google.com/p/hackystat-sensorbase-uh/ SensorBase] project uses libraries from the [http://www.restlet.org/ Restlet] system.  You will need to consult individual packages to determine exactly which external libraries it requires. However, to support integration builds containing all of the Hackystat components, we do require a "standard" version for each external library that all Hackystat projects be compatible with.  The [LibraryStandards Library Standards] page lists all third party libraries used across all of the Hackystat projects, along with their Standard Version.  Not all Hackystat packages require all of these libraries, of course. 

= 2.0 Downloading Hackystat Sources =

|| Note: if you simply want to use Hackystat, you may find it easier to download a binary distribution rather than downloading sources and building locally.  See the [InstallationGuide Installation Guide] for details. ||

Hackystat sources can be downloaded from Google Project Hosting using Subversion.  Because downloading over a dozen projects individually can be irritating, we have developed a set of Ant scripts that can simplify this process.  Here are the steps involved:

== 2.1 Install Java, Ant, and SVNKit ==

Install [http://java.sun.com/ Java], and define the JAVA_HOME environment variable.

Install [http://ant.apache.org/ Ant], and define the ANT_HOME environment variable. 

Install [http://svnkit.com/download/ SVNKit], Standalone edition, and define the SVNKIT_HOME environment variable.

Consult the [LibraryStandards Library Standards] page for the correct version of these packages.

== 2.2 Download Hackystat Download Scripts ==

Create a top-level hackystat directory in which all of your hackystat sources will live.  This is typically called something like "hackystat".

Download the following files into your newly created top-level hackystat directory:

  * [http://hackystat.googlecode.com/svn/trunk/build.xml]
  * [http://hackystat.googlecode.com/svn/trunk/dist.build.xml]
  * [http://hackystat.googlecode.com/svn/trunk/macros.build.xml]

== 2.3 Checkout sources anonymously ==

If you wish to build the system from sources, but are not a member of the Hackystat project, then you can check out all of the sources with the command "ant checkout.anonymous".  This will check out all of the current sources into the current directory.  Here is what the execution of this command looks like:

{{{
C:\hackystat>ant checkout.anonymous
Buildfile: build.xml

checkout.anonymous:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities
     [java] A    hackystat-utilities\sclc.build.xml
      :
     [java] Checked out revision 125.
    [mkdir] Created dir: C:\hackystat\hackystat-sensorbase-uh
     [java] A    hackystat-sensorbase-uh\sample.sensorbase.properties
      :
    [java] Checked out revision 404.
   [mkdir] Created dir: C:\hackystat\hackystat-sensor-shell
    [java] A    hackystat-sensor-shell\sclc.build.xml
      :
      :
      :

BUILD SUCCESSFUL
Total time: 7 minutes 5 seconds
}}}

As you can see, an initial checkout can take a while--in this case, a bit more than 7 minutes. 

However, once you have downloaded the files for the first time, you can later download updates to any of the projects by issuing the same command (which is equivalent to an SVN 'update').  Here's what this looks like:

{{{
C:\hackystat>ant checkout.anonymous
Buildfile: build.xml

checkout.anonymous:
     [java] Checked out revision 125.
     [java] Checked out revision 404.
     [java] Checked out revision 120.
     [java] Checked out revision 116.
     [java] Checked out revision 118.
     [java] Checked out revision 196.
     [java] Checked out revision 116.
     [java] Checked out revision 29.
     [java] Checked out revision 35.
     [java] Checked out revision 67.
     [java] Checked out revision 293.
     [java] Checked out revision 66.
     [java] Checked out revision 172.
     [java] Checked out revision 63.
     [java] Checked out revision 140.

BUILD SUCCESSFUL
Total time: 2 minutes 49 seconds
}}}

As you can see, it took much less time, and in this case, no differences were found between the local copies and those in the Subversion repository at Google Project hosting. 

Note that, due to network irregularities, a checkout may occasionally fail midway through with an error like the following:

{{{
[java] svn: PROPFIND of '/svn/!svn/vcc/default': 502 Bad Gateway (http://hackystat-sensor-shell.googlecode.com)
}}}

If that occurs, just re-invoke the "ant checkout.anonymous" command. It will effectively start up again where it left off. 

Since you are checking out the sources anonymously, you cannot commit any changes you make back to the repository. 

Here is what the directory structure will look like after you have checked out the projects:

{{{
C:\svn-google\hackystat>dir
 Volume in drive C has no label.
 Volume Serial Number is 0891-1F61

 Directory of C:\hackystat

12/20/2007  11:11 AM    <DIR>          .
12/20/2007  11:11 AM    <DIR>          ..
12/20/2007  11:03 AM            14,585 build.xml
12/13/2007  10:11 AM             4,904 dist.build.xml
12/20/2007  11:08 AM    <DIR>          hackystat-analysis-dailyprojectdata
12/20/2007  11:08 AM    <DIR>          hackystat-analysis-telemetry
12/20/2007  11:09 AM    <DIR>          hackystat-sensor-ant
12/20/2007  11:11 AM    <DIR>          hackystat-sensor-eclipse
12/20/2007  11:09 AM    <DIR>          hackystat-sensor-emacs
12/20/2007  11:09 AM    <DIR>          hackystat-sensor-example
12/20/2007  11:07 AM    <DIR>          hackystat-sensor-shell
12/20/2007  11:09 AM    <DIR>          hackystat-sensor-vim
12/20/2007  11:09 AM    <DIR>          hackystat-sensor-xmldata
12/20/2007  11:07 AM    <DIR>          hackystat-sensorbase-uh
12/20/2007  11:11 AM    <DIR>          hackystat-ui-projectviewer
12/20/2007  11:10 AM    <DIR>          hackystat-ui-sensordatabrowser
12/20/2007  11:10 AM    <DIR>          hackystat-ui-sensordataviewer
12/20/2007  11:10 AM    <DIR>          hackystat-ui-telemetryviewer
12/20/2007  11:05 AM    <DIR>          hackystat-utilities
12/20/2007  09:23 AM             5,316 macros.build.xml
               7 File(s)         26,150 bytes
              21 Dir(s)  40,942,211,072 bytes free
}}}

== 2.3 Checkout sources with commit privileges (for Project Members) ==

If you are listed as a member of the Hackystat projects, then you can check out the project sources with authentication.  This enables you to later commit your changes. 

|| Note: If you wish to check out the sources with commit privileges, and if you have previously checked out the sources anonymously, you must first delete the project directories that were checked out anonymously.  Otherwise, SVN will get very confused. ||

Now create a file called "svn.properties" in your top-level Hackystat directory. It should contain two lines like the following:

{{{
svn.username=johnsmith
svn.password=v8f4k2a9
}}}

Substitute your Google Project Hosting user name (your gmail account) and the password that Google generates for you (see the [http://code.google.com/hosting/settings Google Project Hosting Settings Page]). 

This svn.properties file will be read by the Ant script and used to perform an authenticated checkout of the Hackystat projects.  

To perform the authenticated checkout, you can now invoke "ant checkout".  The output from Ant will look exactly like the output from the anonymous checkout shown in the last section ("ant checkout.anonymous"). The difference is that you can now commit your changes back to the SVN repository.

== 2.4 Checking out the Project wiki directory for local editing of wiki pages ==

If you are a Hackystat developer who must create and edit wiki pages, you might find it more convenient to edit the files locally using an editor like Eclipse or Emacs, rather than use the browser-based editor provided when clicking on the "Edit" link in the Wiki page of a Project. 

To edit a wiki page locally, you must first create it using the browser-based "New Page" link. 

Once you have created your wiki page using the browser, Google will place it in your Project's SVN repository in a directory called wiki/.   

The "ant checkout.wiki" command will download all wiki directories.  Here is what the execution of that command looks like:

{{{
C:\hackystat>ant checkout-wiki
Buildfile: build.xml

checkout-wiki:
    [mkdir] Created dir: C:\hackystat\wiki-hackystat-utilities
     [java] A    wiki-hackystat-utilities\UriCache.wiki
      :
     [java] Checked out revision 125.
    [mkdir] Created dir: C:\hackystat\wiki-hackystat-sensorbase-uh
     [java] A    hackystat-sensorbase-uh-wiki\firefox-poster-2.gif
      :
     [java] Checked out revision 404.
    [mkdir] Created dir: C:\hackystat\wiki-hackystat-sensor-shell
      :
      :
      :

BUILD SUCCESSFUL
Total time: 1 minute 55 seconds
}}}

All of the wiki pages will be checked out into newly created project directories prefixed with "wiki-". 

= 3.0 Building Hackystat Projects =

Once you have checked out the sources, whether anonymously, or as a Project member, the next step is to build them.  There are many ways to build the projects depending upon your goals as a developer.  In general, you will want to read the Developer Guide pages associated with a given project in order to understand what libraries must be installed and so forth. 

This section documents the simplest possible approach to building, which is the "standard" approach used for integration builds.  Every Hackystat Project must provide an Ant file called "verify.build.xml" which is called by the integration build scripts in order to compile and test the project. Every Hackystat project must also provide an Ant file called "dist.build.xml" which creates binary executables (such as .jar or .war files) and packages them for distribution.  

== 3.1 Building an individual Hackystat Project ==

|| Note: Before building a project, you may wish to invoke "ant checkout" or "ant checkout.anonymous" to make sure you have the most recent sources. ||

The Ant scripts provide a "build" target for each Hackystat Project that invokes the verify and distribution Ant targets within the given Project.  For example, the "build.utilities" target has the effect of invoking "ant -f verify.build.xml" and "ant -f dist.build.xml" within the hackystat-utilities project directory.  

The Ant scripts do one more useful thing: they provide local definitions of the following environment variables: HACKYSTAT_UTILITIES_HOME, HACKYSTAT_SENSORBASE_HOME, HACKYSTAT_SENSORSHELL_HOME, HACKYSTAT_DAILYPROJECTDATA_HOME, and HACKYSTAT_TELEMETRY_HOME. These environment variables are set to the associated directories that you have just checked out. 

What this means is the following:

  * When building individual Hackystat projects, you must always ensure that any Hackystat projects that it depends upon have been previously built. 

  * You do not have to set these environment variables yourself; they will default appropriately. 

Here is an example invocation of the build target for the Hackystat Utilities project, which is generally the first project you will want to build because it is dependent upon no other projects, and many other project depend upon it. 

Note that I set `hackystat.enable=false` as part of the command in order to disable Hackystat data collection.  This is helpful for external developers who want to build the system locally but not install the sensors just for this purpose. 

{{{
C:\hackystat>ant -Dhackystat.enable=false build.utilities
Buildfile: build.xml

build.utilities:
     [echo]
     [echo]     Hackystat Utilities Verification Task
      :
      :
clean:
   [delete] Deleting directory C:\hackystat\hackystat-utilities\build

compile:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\classes
    [javac] Compiling 39 source files to C:\hackystat\hackystat-utilities\build\classes

checkstyle.tool:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\checkstyle
[checkstyle] Running Checkstyle 4.3 on 39 files
    :
    :

junit.tool:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\junit
    [junit] Running org.hackystat.utilities.home.TestHackystatUserHome
     :
     :

javadoc:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\javadoc
  [javadoc] Generating Javadoc
  [javadoc] Javadoc execution
  [javadoc] Loading source files for package org.hackystat.utilities.home...
    :

findbugs.tool:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\findbugs
 [findbugs] Running FindBugs...
 [findbugs] Output saved to C:\hackystat\hackystat-utilities\build\findbugs/findbugs.xml

      :
      :

pmd.tool:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\pmd
      [pmd] No problems found!

      :
      :

sclc.tool:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\sclc
     [exec]  Lines  Blank  Cmnts   NCSL TPtoks
     [exec] ====== ====== ====== ====== ====== ============================================
      :
     [exec]     26      0      0     26    152 ----- HTML -----  (8 files)
     [exec]   4455    524   1741   2194  16964 ----- Java -----  (39 files)
     [exec]   4481    524   1741   2220  17116 ***** TOTAL *****  (47 files)

     :
     :

jar-home:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\tmp-lib
     [copy] Copying 2 files to C:\hackystat\hackystat-utilities\tmp-lib
      [jar] Building jar: C:\hackystat\hackystat-utilities\hackystatuserhome.lib.jar
   [delete] Deleting directory C:\hackystat\hackystat-utilities\tmp-lib
      :
      :

dist:
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\dist-tmp\hackystat-utilities-8.0.1220
     [copy] Copying 74 files to C:\hackystat\hackystat-utilities\dist-tmp\hackystat-utilities-8.0.1220
    [mkdir] Created dir: C:\hackystat\hackystat-utilities\build\dist
      [zip] Building zip: C:\hackystat\hackystat-utilities\build\dist\hackystat-utilities-8.0.1220.zip
       :
       :

BUILD SUCCESSFUL
Total time: 42 seconds
}}}

By changing directories to hackystat-utilities, you'll see that the result of this build.utilities target is to create several jar files, including hackystatlogger.lib.jar, hackystatuserhome.lib.jar, and so on.  Now that these library files have been created, you will be able to build projects that depend upon hackystat utilities, such as hackystat-sensorbase-uh. 

{{{
C:\svn-google\hackystat\trunk\hackystat-utilities>dir
 Volume in drive C has no label.
 Volume Serial Number is 0891-1F61

 Directory of C:\svn-google\hackystat\trunk\hackystat-utilities

12/20/2007  12:24 PM    <DIR>          .
12/20/2007  12:24 PM    <DIR>          ..
12/20/2007  11:43 AM               572 .classpath
12/20/2007  11:43 AM               395 .project
12/20/2007  12:24 PM    <DIR>          build
12/20/2007  11:43 AM             4,092 build.xml
12/20/2007  11:43 AM             2,583 checkstyle.build.xml
12/20/2007  11:43 AM             1,164 dist.build.xml
12/20/2007  11:43 AM             5,043 emma.build.xml
12/20/2007  11:43 AM             2,220 findbugs.build.xml
12/20/2007  11:43 AM             3,506 hackystat.build.xml
12/20/2007  12:24 PM             5,885 hackystatlogger.lib.jar
12/20/2007  12:24 PM             2,224 hackystatuserhome.lib.jar
12/20/2007  11:43 AM             5,840 jar.build.xml
12/20/2007  11:43 AM    <DIR>          javadoc
12/20/2007  11:43 AM             1,335 javadoc.build.xml
12/20/2007  11:43 AM             2,026 junit.build.xml
12/20/2007  11:43 AM    <DIR>          lib
12/20/2007  11:43 AM             2,357 pmd.build.xml
12/20/2007  11:43 AM             1,420 sclc.build.xml
12/20/2007  11:43 AM    <DIR>          src
12/20/2007  12:24 PM             2,193 stacktrace.lib.jar
12/20/2007  12:24 PM            35,242 time.lib.jar
12/20/2007  12:24 PM             6,193 tstamp.lib.jar
12/20/2007  12:24 PM           739,984 uricache.lib.jar
12/20/2007  11:43 AM             2,028 verify.build.xml
              20 File(s)        826,302 bytes
               6 Dir(s)  40,862,126,080 bytes free
}}}

== 3.2 Dependencies ==

If you are building individual projects at a time, you need to be aware of dependencies between projects so you can rebuild them in the right order when things change.  Here are a list of rules that summarize the dependencies:

  * All Sensor projects depend upon the Sensor Shell project.
  * The Sensor Shell project depends upon the !SensorBase project.
  * The !SensorBase project depends upon the Utilities project.
  * The !DailyProjectData project depends upon the !SensorBase project.
  * The Telemetry project depends upon the !DailyProjectData project.
  * The !SensorDataViewer and !SensorDataBrowser projects depends upon the !SensorBase project.
  * The !ProjectViewer project depends upon the !DailyProjectData and !SensorBase projects.
  * The !TelemetryViewer project depends upon the Telemetry project. 

Of course, dependencies are transitive. 

== 3.3 Building the entire system ==

|| Note: Before building all projects, you may wish to invoke "ant checkout" or "ant checkout.anonymous" to make sure you have the most recent sources. ||

It is also possible to build the system with one command: "ant build.all".  The advantage to this command is that it guarantees the projects are built in an order that satisfies their dependencies.  

The output of running this command is quite long, so I will not show it here.  However, it basically just calls all of the individual build.<project> targets in an appropriate order. 

Building the entire system typically takes about 10 minutes. 




